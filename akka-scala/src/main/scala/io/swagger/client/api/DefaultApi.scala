/**
 * KotlinAPI
 * KotlinAPI
 *
 * OpenAPI spec version: 1.0.0
 * Contact: gr-kotlinB2020@wpi.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.AuthenticateUserResponse
import io.swagger.client.model.CompleteChoiceRequest
import io.swagger.client.model.CreateChoiceRequest
import io.swagger.client.model.CreateChoiceResponse
import io.swagger.client.model.GetAlternativeResponse
import io.swagger.client.model.GetChoiceResponse
import io.swagger.client.model.GetFeedbackResponse
import io.swagger.client.model.GetReportResponse
import io.swagger.client.model.LeaveApprovalRequest
import io.swagger.client.model.LeaveDisapprovalRequest
import io.swagger.client.model.LeaveFeedbackRequest
import io.swagger.client.model.User
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 200 : AuthenticateUserResponse (user successfully added to the choice or successfully authenticated with prexisting registration)
   *   code 400 : AuthenticateUserResponse (user authentication failed, error message specifies)
   * 
   * @param createUserRequest 
   */
  def authenticateUser(createUserRequest: User): ApiRequest[AuthenticateUserResponse] =
    ApiRequest[AuthenticateUserResponse](ApiMethods.POST, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/user", "application/json")
      .withBody(createUserRequest)
      .withSuccessResponse[AuthenticateUserResponse](200)
      .withErrorResponse[AuthenticateUserResponse](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Proval left or removed successfully)
   *   code 400 :  (error)
   * 
   * @param completeChoiceRequest 
   */
  def completeChoice(completeChoiceRequest: CompleteChoiceRequest): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/complete", "application/json")
      .withBody(completeChoiceRequest)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : CreateChoiceResponse (choice properly created)
   *   code 400 : CreateChoiceResponse (choice creation failed)
   * 
   * @param createChoiceRequest 
   */
  def createChoice(createChoiceRequest: CreateChoiceRequest): ApiRequest[CreateChoiceResponse] =
    ApiRequest[CreateChoiceResponse](ApiMethods.POST, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/choice", "application/json")
      .withBody(createChoiceRequest)
      .withSuccessResponse[CreateChoiceResponse](200)
      .withErrorResponse[CreateChoiceResponse](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : GetAlternativeResponse (alternative found)
   *   code 400 :  (alternative doesn&#39;t exist)
   * 
   * @param alternativeNumber alternative number we want to retrieve
   */
  def getAlternative(alternativeNumber: Int): ApiRequest[GetAlternativeResponse] =
    ApiRequest[GetAlternativeResponse](ApiMethods.GET, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/alternative", "application/json")
      .withQueryParam("alternativeNumber", alternativeNumber)
      .withSuccessResponse[GetAlternativeResponse](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : GetChoiceResponse (choice found)
   *   code 400 :  (choice doesn&#39;t exist)
   * 
   * @param uniqueID unique ID of choice to get
   */
  def getChoice(uniqueID: String): ApiRequest[GetChoiceResponse] =
    ApiRequest[GetChoiceResponse](ApiMethods.GET, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/choice", "application/json")
      .withQueryParam("uniqueID", uniqueID)
      .withSuccessResponse[GetChoiceResponse](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : GetFeedbackResponse (feedback for alternative found)
   *   code 400 :  (alternative doesn&#39;t exist)
   * 
   * @param alternativeNumber alternative number we want feedback for
   */
  def getFeedback(alternativeNumber: Int): ApiRequest[GetFeedbackResponse] =
    ApiRequest[GetFeedbackResponse](ApiMethods.GET, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/feedback", "application/json")
      .withQueryParam("alternativeNumber", alternativeNumber)
      .withSuccessResponse[GetFeedbackResponse](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : GetReportResponse (report generated)
   *   code 400 :  (no choices in the system)
   */
  def getReport(): ApiRequest[GetReportResponse] =
    ApiRequest[GetReportResponse](ApiMethods.GET, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/report", "application/json")
      .withSuccessResponse[GetReportResponse](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Approval left or removed successfully)
   *   code 400 :  (error)
   * 
   * @param leaveApprovalRequest 
   */
  def leaveApproval(leaveApprovalRequest: LeaveApprovalRequest): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/approval", "application/json")
      .withBody(leaveApprovalRequest)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Disapproval left or removed successfully)
   *   code 400 :  (error)
   * 
   * @param leaveDisapprovalRequest 
   */
  def leaveDisapproval(leaveDisapprovalRequest: LeaveDisapprovalRequest): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/disapproval", "application/json")
      .withBody(leaveDisapprovalRequest)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Feedback left successfully)
   *   code 400 :  (error)
   * 
   * @param leaveFeedbackRequest 
   */
  def leaveFeedback(leaveFeedbackRequest: LeaveFeedbackRequest): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/Kotlin/KotlinAPIv1/1.0.0", "/feedback", "application/json")
      .withBody(leaveFeedbackRequest)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      

}

